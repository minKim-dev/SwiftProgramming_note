//
//  main.swift
//  LearningSwift
//
//  Created by 김민성 on 2023/10/11.
//

/*:
 # 상속, 클래스, 그리고 하위 클래스
 ## 상속
 클래스 상속으로 우리는 *class hierrachy*를 만든다. 클래스 계층 구조를 만든다!
 (애플 문서에서 hierarchy가 나올 때마다 계층적 구조가 뭔 말인가 했는데 클래스를 이용해서 계층 구조를 만든다는 의미였군...)
 
 계층 구조의 최상위에 있는 클래스를 **base class** 또는 **root class**라고 부르고 상속받은 클래스들을 **하위 클래스** 또는 **자식 클래스**라고 부른다. 하나의 클래스는 하위 클래스를 얼마든 가질 수 있음. 하위 클래스가 상속받은 클래스를 **부모 클래스** 또는 **상위 클래스**라고 함.
 
 스위프트의 하위 클래스는 반드시 한 개의 부모 클래스만 상속받을 수 있는데 이는 **단일 상속**이라는 개념이다!
 
 서브클래싱 예제는 Subclassing.swift 파일에 있다. <- 보고 override로 넘어가자!
 
 ## override
 우리가 상속을 받음으로써 부모 클래스에 있는 기능들을 이용할 수 있지만 그 기능이 우리가 원하는 **정확한** 기능이 아닐 수 있다.
 이런 조건에서 우리가 할 수 있는건 부모 클래스에 있는 메서드를 완전히 무시하고 새로운 메서드를 만드는 방법이 있지만,
 override를 이용하면 이 문제를 더 간편하게 해결할 수 있다.
 
 ### overriding시, 따라야 할 두 가지 규칙
 * 하위 클래스의 오버라이딩 메서드는 오버라이딩 되는 부모 클래스의 메서드의 매개변수 개수와 타입이 정확하게 일치해야 한다.
 * 새롭게 오버라이딩하는 메서드는 반드시 부모 클래스 메서드가 반환하는 타입과 일치해야 한다.
 
 ## 익스텐션(Extension)
 스위프트 클래스에 새로운 기능을 추가하는 또 다른 방법이다...!
 하위 클래스를 생성하거나 참조하지 않고 기존 클래스에 메서드, 생성자 그리고 연산 프로퍼티와 서브스크립트 등의 기능을 추가하기 위해 사용될 수 있다.
 스위프트 언어와 iOS SDK 프레임워크에 내장된 클래스에 기능을 추가할 때 익스텐션을 이용하면 매우 효과적일 수 있다.
 
 */

import Foundation



